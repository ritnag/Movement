#include <Servo.h>
#include <Wire.h>
#include <AFMotor.h>

                                            //ultrasonic
AF_DCMotor rightBack(1);                          
AF_DCMotor rightFront(2);
AF_DCMotor leftFront(3);
AF_DCMotor leftBack(4);
Servo servoLook;

byte trig = 2;                                    
byte echo = 13;
byte maxDist = 150;
byte stopDist = 15;                               
float timeOut = 2*(maxDist+10)/100/340*1000000;

byte motorSpeed = 55;
int motorOffset = 10;                          
int turnSpeed = 50;  
                                              //mopping
int motor=5;
int pwm = 2 ;

                                             //buzzer
 
 const int trigPin = 9;
const int echoPin = 10;
long duration;
int distance;

int IRsensor = 7; // connect ir sensor to arduino digital 7 pin       //lid opening
 Servo myservo;   //create servo object  
 int pos=0;      //


void setup()
{
  Serial.begin(9600);
  
  //lid opening
  pinMode (IRsensor, INPUT); // sensor pin INPUT  
  myservo.attach(9);  
  myservo.write(0);     //close cap on power on  
  delay(100);    
  
  
  //blower
  
  //ultrasonic movement
  
  rightBack.setSpeed(motorSpeed);                
  rightFront.setSpeed(motorSpeed);
  leftFront.setSpeed(motorSpeed+motorOffset);
  leftBack.setSpeed(motorSpeed+motorOffset);
  rightBack.run(RELEASE);                         
  rightFront.run(RELEASE);
  leftFront.run(RELEASE);
  leftBack.run(RELEASE);
  servoLook.attach(10);                           
  pinMode(trig,OUTPUT);                           
  pinMode(echo,INPUT);
  
  //buzzer
  
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
  Serial.begin(9600); // Starts the serial communication
  pinMode(buzzer, OUTPUT);
  
  
  //disinfectant spraying
  
  //mopping 
  pinMode(motor, OUTPUT);
  pinMode(pwm,OUTPUT) ;  
  Serial.begin(9600);
  
  
  //sealing the bag
}


void loop()
{

 void ultrasonicmove()                              //ultrasonic movement
 {
   servoLook.write(90);                           
  delay(750);
  int distance = getDistance();                   
  if(distance >= stopDist)                        
  {
    moveForward();
  }
  while(distance >= stopDist)                     
  {
    distance = getDistance();
    delay(250);
  }
  stopMove();                                     
  int turnDir = checkDirection();                 
  Serial.print(turnDir);
  switch (turnDir)                                
  {
    case 0:                                       
      turnLeft (400);
      break;
    case 1:                                      
      turnLeft (700);
      break;
    case 2:                                      
      turnRight (400);
      break;
  }
}


void moveForward()                                
{
  rightBack.run(FORWARD);
  rightFront.run(FORWARD);
  leftFront.run(FORWARD);
  leftBack.run(FORWARD);
}

void stopMove()                                   
{
  rightBack.run(RELEASE);
  rightFront.run(RELEASE);
  leftFront.run(RELEASE);
  leftBack.run(RELEASE);
}

void turnLeft(int duration)                                 
{
  rightBack.setSpeed(motorSpeed+turnSpeed);                 
  rightFront.setSpeed(motorSpeed+turnSpeed);
  leftFront.setSpeed(motorSpeed+motorOffset+turnSpeed);
  leftBack.setSpeed(motorSpeed+motorOffset+turnSpeed);
  rightBack.run(FORWARD);
  rightFront.run(FORWARD);
  leftFront.run(BACKWARD);
  leftBack.run(BACKWARD);
  delay(duration);
  rightBack.setSpeed(motorSpeed);                           
  rightFront.setSpeed(motorSpeed);
  leftFront.setSpeed(motorSpeed+motorOffset);
  leftBack.setSpeed(motorSpeed+motorOffset);
  rightBack.run(RELEASE);
  rightFront.run(RELEASE);
  leftFront.run(RELEASE);
  leftBack.run(RELEASE);
  
}

void turnRight(int duration)                                
{
  rightBack.setSpeed(motorSpeed+turnSpeed);                 
  rightFront.setSpeed(motorSpeed+turnSpeed);
  leftFront.setSpeed(motorSpeed+motorOffset+turnSpeed);
  leftBack.setSpeed(motorSpeed+motorOffset+turnSpeed);
  rightBack.run(BACKWARD);
  rightFront.run(BACKWARD);
  leftFront.run(FORWARD);
  leftBack.run(FORWARD);
  delay(duration);
  rightBack.setSpeed(motorSpeed);                           
  rightFront.setSpeed(motorSpeed);
  leftFront.setSpeed(motorSpeed+motorOffset);
  leftBack.setSpeed(motorSpeed+motorOffset);
  rightBack.run(RELEASE);
  rightFront.run(RELEASE);
  leftFront.run(RELEASE);
  leftBack.run(RELEASE);
}

int getDistance()                                   
{
  unsigned long pulseTime;                          
  int distance;                                     
  digitalWrite(trig, HIGH);                         
  delayMicroseconds(10);
  digitalWrite(trig, LOW);
  pulseTime = pulseIn(echo, HIGH, timeOut);        
  distance = (float)pulseTime * 340 / 2 / 10000;    
  return distance;
}

int checkDirection()                                           
{
  int distances [2] = {0,0};                                    
  int turnDir = 1;                                              
  servoLook.write(180);                                         
  delay(500);
  distances [0] = getDistance();                               
  servoLook.write(0);                                           
  delay(1000);
  distances [1] = getDistance();                                
  if (distances[0]>=200 && distances[1]>=200)                   
    turnDir = 0;
  else if (distances[0]<=stopDist && distances[1]<=stopDist)    
    turnDir = 1;
  else if (distances[0]>=distances[1])                           
    turnDir = 0;
  else if (distances[0]<distances[1])                           
    turnDir = 2;
  return turnDir;
}

void mopping()                                         //mopping
{
 digitalWrite(motor, HIGH);
 analogWrite(pwm,255) ;       // speed of rotaion by chaning pwm input
 }
 
 
 
 
 void buzzermain()                              //buzzer
 
{
 // Clears the trigPin
digitalWrite(trigPin, LOW);
delayMicroseconds(2);
// Sets the trigPin on HIGH state for 10 micro seconds
digitalWrite(trigPin, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin, LOW);
// Reads the echoPin, returns the sound wave travel time in microseconds
duration = pulseIn(echoPin, HIGH);
// Calculating the distance
distance= duration*0.034/2;
// Prints the distance on the Serial Monitor
if(distance>=51)
{
   //Trashbag();
  buzzer();
}
else if(distance>35 || distance<40)
{
buzzer();
}}
void buzzer()
{
const int buzzer =8;
tone(buzzer,1000);
delay(10000);
}


int value = digitalRead (IRsensor);          //lid opening
  if (value == 1)  
   { Serial.print("HIGH-  Opening the lid of bin\n");  
   myservo.write(90);  
   delay(3000);  
   }  
  else  
   { Serial.print("LOW-  lid remains close\n");  
   myservo.write(0);  
   delay(3000);  
   }  

}
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 


}

